# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:8.0

whitelist: &whitelist
  paths:
    - .npmignore
    - coverage/*
    - dist/*
    - node_modules/*
    - src/*
    - test/*
    - CODE_OF_CONDUCT.md
    - LICENSE.md
    - package.json
    - README.md
    - tsconfig.json
    - tslint.json

version: 2.1

# # Use a package of configuration called an orb.
# orbs:
#   # Declare a dependency on the welcome-orb
#   welcome: circleci/welcome-orb@0.4.1
# # Orchestrate or schedule a set of jobs
# workflows:
#   # Name the workflow "welcome"
#   welcome:
#     # Run the welcome/run job in its own container
#     jobs:
#       - welcome/run
# workflows:
# test-backend:
jobs:
  checkout:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
        keys:
          - v1-dependencies-{{ checksum "package.json"}}
          - v1-dependencies-
      - run:
          name: Install Dependencies
          command: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - persist_to_workspace:
          root: ~/repo
          <<: *whitelist
  lint:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Lint TypeScript code
          command: yarn lint

  test:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Test TypeScript code
          command: yarn test:cover

      - persist_to_workspace:
          root: ~/repo
          <<: *whitelist
  coveralls:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Submit coverage report to Coveralls.io
          command: yarn coveralls

  build:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Build TypeScript code
          command: yarn build

      - persist_to_workspace:
          root: ~/repo
          <<: *whitelist

  # jobs: # basic units of work in a run
  build-backend: # runs not using Workflows must have a `build` job as entry point
    parallelism: 1 # run only one instance of this job
    docker: # run the steps with Docker
      - image: circleci/elixir:1.7.3 # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          MIX_ENV: test
          TERM: xterm
      - image: circleci/postgres:10.1-alpine # database image
        environment: # environment variables for database
          POSTGRES_USER: postgres
          POSTGRES_DB: app_test
          POSTGRES_PASSWORD: 132456
          TERM: xterm

    working_directory: ~/app # directory where steps will run

    steps: # commands that comprise the `build` job
      - checkout # check out source code to working directory

      - run: cd api && mix local.hex --force # install Hex locally (without prompt)
      - run: cd api && mix local.rebar --force # fetch a copy of rebar (without prompt)

      - restore_cache: # restores saved mix cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys: # list of cache keys, in decreasing specificity
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache: # restores saved build cache
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run: cd api && mix do deps.get, compile # get updated dependencies & compile them
      - save_cache: # generate and store mix cache
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache: # make another, less specific cache
          key: v1-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache: # you should really save one more cache (just in case)
          key: v1-mix-cache
          paths: "deps"
      - save_cache: # don't forget to save a *build* cache, too
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache: # and one more build cache for good measure
          key: v1-build-cache
          paths: "_build"

      - run: # special utility that stalls main process until DB is ready
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: cd api && mix test # run all tests in project

      - store_test_results: # upload junit test results for display in Test Summary
          # Read more: https://circleci.com/docs/2.0/collect-test-data/
          path: _build/test/lib/gwap
workflows:
  build:
    jobs:
      - checkout
      - build-backend
      - test:
          requires:
            - checkout
      - lint:
          requires:
            - checkout
      - coveralls:
          requires:
            - test
      - build-frontend:
          requires:
            - test
            - lint
